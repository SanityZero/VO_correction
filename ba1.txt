#include <iostream>
#include <locale>
#include <iomanip> 
#include <fstream>
#include <string>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/video.hpp>
#include <algorithm>
#include <random>
using namespace cv;
using namespace std;

#include "ErEstVO.h"

#define M_PI (double)3.14159265358979323846
#define TEST_ANGLE true


typedef struct {
    Mat mat;
    double timestamp;
    Pose_type pose;
} Source_Type;

typedef struct {
    vector<Point3d> w;
    vector<double> timestamp;
    vector<Point3d> angle;
} Angle_model_Type;

Angle_model_Type generate_model(double mean_1, const int size, double stddev, Point3d w, Point3d ang_0, double deltatime)
{
    Angle_model_Type res;

    default_random_engine generator;
    normal_distribution<double> distribution(mean_1, stddev);
    res.angle.push_back(ang_0);

    for (int i = 1; i < size+1; i++) {
        res.angle.push_back(Point3d(res.angle[i - 1].x + w.x * deltatime, res.angle[i - 1].y + w.y * deltatime, res.angle[i - 1].z + w.z * deltatime));
        res.w.push_back(Point3d(w.x + distribution(generator), w.y + distribution(generator), w.z + distribution(generator)));
        res.timestamp.push_back(deltatime*i);
    }

    return res;
};


Point3d rotate(Point3d point, Point3d ang) {
    Point3d res;
    Point3d tmp1;
    Point3d tmp2;
    double x = point.x, y = point.y, z = point.z;
    double a = ang.x * M_PI / 180.0, b = ang.y * M_PI / 180.0, c = ang.z * M_PI / 180.0;
    
    tmp1.x = x * cos(c) + y * sin(c);
    tmp1.y = y * cos(c) - x * sin(c);
    tmp1.z = z;

    x = tmp1.x, y = tmp1.y, z = tmp1.z;

    tmp2.x = x * cos(b) - z * sin(b);
    tmp2.y = y;
    tmp2.z = x * sin(b) + z * cos(b);

    x = tmp2.x, y = tmp2.y, z = tmp2.z;

    res.x = x;
    res.y = y * cos(a) + z * sin(a);
    res.z = z * cos(a) - y * sin(a);
   
    return res;
};

Mat mat_multi(Mat left, Mat rigth) {
    Mat res = left.clone();

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        {
            res.at<double>(i, j) = left.at<double>(i,0) * rigth.at<double>(0,j) + left.at<double>(i,1) * rigth.at<double>(1,j) + left.at<double>(i,2) * rigth.at<double>(2,j);
        };
    return res;
};

Mat mat_add(Mat left, Mat rigth, double a = 1.0, double b = 1.0) {
    Mat res = left.clone();

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        {
            res.at<double>(i, j) = a * left.at<double>(i, j) + b * rigth.at<double>(i, j);
        };
    return res;
};



Pose_type getGTData(string, int);

class Data_seq {
public:
    vector<Pose_type> dataline;
    vector<Pose_type> pose;
    vector<Point3d> rot_ang_GT;
    vector<Point3d> rot_ang;
    vector<float> timestamps;
    string dirname;
    int limit;

    Data_seq(string dirname = "C:/Kitti/2011_09_26/2011_09_26_drive_0001_sync/oxts/") : dirname(dirname), limit(0) {};
    ~Data_seq() {};

    void load_angle_model(Angle_model_Type model, string angle_type = "EC") {
        vector<Point3d> w = model.w;
        vector<double> time = model.timestamp;
        vector<Point3d> GT_angle = model.angle;
        Data_seq res;

        this->limit = time.size()-1;
        //загрузить данные модели
        for (int i = 0; i < this->limit; i++)
        {
            this->timestamps.push_back(time[i]);

            Pose_type tmp;
            tmp.wx = w[i].x;
            tmp.wy = w[i].y;
            tmp.wz = w[i].z;

            tmp.roll = GT_angle[i].x;
            tmp.pitch = GT_angle[i].y;
            tmp.yaw = GT_angle[i].z;

            this->dataline.push_back(tmp);
        };

        this->rot_ang_GT.push_back(Point3d(this->dataline[0].roll, this->dataline[0].pitch, this->dataline[0].yaw));
        this->rot_ang_GT.push_back(Point3d(this->dataline[1].roll, this->dataline[1].pitch, this->dataline[1].yaw));

        this->rot_ang.push_back(Point3d(this->dataline[0].roll, this->dataline[0].pitch, this->dataline[0].yaw));
        this->rot_ang.push_back(Point3d(this->dataline[1].roll, this->dataline[1].pitch, this->dataline[1].yaw));


        for (int i = 2; i < this->limit; i++) {
            double deltatime = abs(this->timestamps[i - 1] - this->timestamps[i]);

            Point3d rot_v;
            Point3d rot_vu = Point3d(0, 0, 0);

            // по направляющим косинусам


            rot_v.x = dataline[1].wx - rot_vu.x;
            rot_v.y = -dataline[1].wz - rot_vu.y;
            rot_v.z = dataline[1].wy - rot_vu.y;

            Point3d rot_ang;

            if (angle_type == "EC") {

                double psi = this->rot_ang[i - 1].x * M_PI / 180.0;
                double theta = -this->rot_ang[i - 1].z * M_PI / 180.0;
                double gamma = this->rot_ang[i - 1].y * M_PI / 180.0;



                double wx = rot_v.x;
                double wy = rot_v.y;
                double wz = rot_v.z;

                Point3d rotw_EC;
                rotw_EC.x = sin(gamma) * wy + wz * cos(gamma);

                theta += rotw_EC.x * deltatime;;

                double tmp = cos(gamma) * wx + sin(gamma) * wz;

                rotw_EC.y = tmp / cos(theta);
                psi += rotw_EC.y * deltatime;
                rotw_EC.z = tmp * tan(theta);
                gamma += rotw_EC.z * deltatime;

                rot_ang = Point3d(psi, gamma, -theta);
            };

            Point3d rot_ang_GT;

            rot_ang_GT.x = this->dataline[i].roll;
            rot_ang_GT.y = this->dataline[i].pitch;
            rot_ang_GT.z = this->dataline[i].yaw;
            this->rot_ang_GT.push_back(rot_ang_GT);
            this->rot_ang.push_back(rot_ang);
        }
    };

    void loadBINS(string angle_type = "") {
        Data_seq res;

        string fn_tmp = this->dirname + "timestamps.txt";
        ifstream in(fn_tmp);
        if (!in) cout << "File in not open\n";
        
        this->limit = 0;
        do
        {
            string timeline;
            getline(in, timeline);
            if (timeline == "") break;
            this->limit++;
        
        
            timeline = timeline.substr(timeline.find(' ') + 1, timeline.length());
            double tmp = 0; 
        
            tmp += 60.0 * 60.0 * stod(timeline.substr(0, timeline.find(':')));
            timeline = timeline.substr(timeline.find(':') + 1, timeline.length());
        
            tmp += 60.0 * stod(timeline.substr(0, timeline.find(':')));
            timeline = timeline.substr(timeline.find(':') + 1, timeline.length());
            tmp += stod(timeline.substr(0, timeline.find(':')));
            this->timestamps.push_back(tmp);
        } while (!in.eof() /*&& /*l_tmp >=0*/);

        for (int i = 0; i < this->limit; i++)
            this->dataline.push_back(getGTData(this->dirname + "data/", i));

        this->pose.push_back(this->dataline[0]);//начальное время
        this->pose.push_back(this->dataline[1]);


        Point3d vel(this->dataline[1].lat - this->dataline[0].lat, this->dataline[1].lon - this->dataline[0].lon, this->dataline[1].alt - this->dataline[0].alt);//начальная скорость

        double w1 = this->pose[0].roll * M_PI / 180.0;
        double w2 = -this->pose[0].yaw * M_PI / 180.0;
        double w3 = this->pose[0].pitch* M_PI / 180.0;

        Mat C0 = (Mat_<double>(3, 3) << cos(w2) * cos(w1), sin(w3) * sin(w1) - cos(w3) * cos(w1) * cos(w2), cos(w3) * sin(w1) + sin(w3) * cos(w1) * sin(w2), sin(w2), cos(w3) * cos(w2), -sin(w3) * cos(w2), -cos(w2) * sin(w1), sin(w3) * cos(w1) + cos(w3) * cos(w1) * sin(w2), cos(w3) * cos(w1) - sin(w3) * sin(w1) * sin(w2));
        w1 = this->pose[1].roll * M_PI / 180.0;
        w2 = -this->pose[1].yaw* M_PI / 180.0;
        w3 = this->pose[1].pitch * M_PI / 180.0;
        Mat C = (Mat_<double>(3, 3) << cos(w2) * cos(w1), sin(w3) * sin(w1) - cos(w3) * cos(w1) * cos(w2), cos(w3) * sin(w1) + sin(w3) * cos(w1) * sin(w2), sin(w2), cos(w3) * cos(w2), -sin(w3) * cos(w2), -cos(w2) * sin(w1), sin(w3) * cos(w1) + cos(w3) * cos(w1) * sin(w2), cos(w3) * cos(w1) - sin(w3) * sin(w1) * sin(w2));

        this->rot_ang_GT.push_back(Point3d(this->dataline[0].roll, this->dataline[0].pitch, this->dataline[0].yaw));
        this->rot_ang_GT.push_back(Point3d(this->dataline[1].roll, this->dataline[1].pitch, this->dataline[1].yaw));

        this->rot_ang.push_back(Point3d(this->dataline[0].roll, this->dataline[0].pitch, this->dataline[0].yaw));
        this->rot_ang.push_back(Point3d(this->dataline[1].roll, this->dataline[1].pitch, this->dataline[1].yaw));


        for (int i = 2; i < this->limit; i++) {
            double deltatime = abs(this->timestamps[i-1] - this->timestamps[i]);

            Point3d rot_v;
            Point3d rot_vu = Point3d(0, 0, 0);

            // по направляющим косинусам
           

            rot_v.x = dataline[1].wx - rot_vu.x;
            rot_v.y = -dataline[1].wz - rot_vu.y;
            rot_v.z = dataline[1].wy - rot_vu.y;

            Point3d rot_ang;

            if (angle_type == "") {
                // формирование кососимметричной матрицы
                Mat CSM = (Mat_<double>(3, 3) << 0, -rot_v.z, rot_v.y, rot_v.z, 0, -rot_v.x, -rot_v.y, rot_v.x, 0);
                //double CSM[3][3] = {
                //    {0, -rot_v.z, rot_v.y},
                //    {rot_v.z, 0, rot_v.x},
                //    {-rot_v.y, rot_v.x, 0}
                //};
                //матричное произведение
                Mat Do_Int = mat_multi(C, CSM);
                Mat C_TMP = mat_add(Do_Int, C, deltatime);
                C = C_TMP.clone();

                double psi = atan(-C.at<double>(2, 0) / C.at<double>(0, 0)) / M_PI * 180.0;
                double theta = asin(-C.at<double>(1, 0)) / M_PI * 180.0;
                double gamma = atan(-C.at<double>(1, 2) / C.at<double>(1, 1)) / M_PI * 180.0;

                rot_ang = Point3d(psi, gamma, -theta);
            };

            if (angle_type == "EC") {

                double psi = this->rot_ang[i - 1].x * M_PI / 180.0;
                double theta = -this->rot_ang[i - 1].z * M_PI / 180.0;
                double gamma = this->rot_ang[i - 1].y* M_PI / 180.0;

                

                double wx = rot_v.x;
                double wy = rot_v.y;
                double wz = rot_v.z;

                Point3d rotw_EC;
                rotw_EC.x = sin(gamma) * wy + wz * cos(gamma);

                theta += rotw_EC.x * deltatime;;

                double tmp = cos(gamma) * wx + sin(gamma) * wz;

                rotw_EC.y = tmp / cos(theta);
                psi += rotw_EC.y * deltatime;
                rotw_EC.z = tmp * tan(theta);
                gamma += rotw_EC.z * deltatime;

                rot_ang = Point3d(psi, gamma, -theta);
            };

            Point3d rot_ang_GT;

            rot_ang_GT.x = this->dataline[i].roll;
            rot_ang_GT.y = this->dataline[i].pitch;
            rot_ang_GT.z = this->dataline[i].yaw;
            this->rot_ang_GT.push_back(rot_ang_GT);

            if (angle_type == "GT") rot_ang = rot_ang_GT;

            this->rot_ang.push_back(rot_ang);

            //считывание ускорений
            Point3d axel;
            axel.x = this->dataline[i].ax;
            axel.y = this->dataline[i].ay;
            axel.z = this->dataline[i].az;
            Point3d axel_rot = rotate(axel, rot_ang);
            axel_rot.z -= 9.80665;
            //Нужно вычесть ускорение свободного падения.

            Point3d tmp_vel(0, 0, 0);

            tmp_vel.x += vel.x + axel_rot.x * deltatime;
            tmp_vel.y += vel.y + axel_rot.y * deltatime;
            tmp_vel.z += vel.z + axel_rot.z * deltatime;

            Pose_type pose_tmp;

            pose_tmp.lat = pose[i-1].lat + (tmp_vel.x + vel.x) * deltatime/2;
            pose_tmp.lon = pose[i-1].lon + (tmp_vel.y + vel.y) * deltatime/2;
            pose_tmp.alt = pose[i-1].alt + (tmp_vel.z + vel.z) * deltatime/2;

            vel = tmp_vel;
            this->pose.push_back(pose_tmp);
        }
    };

    void print_traect(int num) {
        Point2i img_size = Point2i(520, 520);
        Mat img(img_size.x, img_size.y, CV_8UC3, Scalar(255, 255, 255));
        int border = 3;
        double max_x = this->pose[1].lon - this->pose[0].lon;
        double max_y = this->pose[1].lon - this->pose[0].lon;
        double min_x = this->pose[1].lat - this->pose[0].lat;
        double min_y = this->pose[1].lat - this->pose[0].lat;

        for (int i = 0; i < this->pose.size(); i++)
        {
            max_x = this->pose[i].lon - this->pose[0].lon > max_x ? this->pose[i].lon - this->pose[0].lon : max_x;
            max_y = this->pose[i].lat - this->pose[0].lat > max_y ? this->pose[i].lat - this->pose[0].lat : max_y;

            min_x = this->pose[i].lon - this->pose[0].lon < min_x ? this->pose[i].lon - this->pose[0].lon : min_x;
            min_y = this->pose[i].lat - this->pose[0].lat < min_y ? this->pose[i].lat - this->pose[0].lat : min_y;
        };

        for (int i = 0; i < this->dataline.size(); i++)
        {
            max_x = this->dataline[i].lon - this->pose[0].lon > max_x ? this->dataline[i].lon - this->pose[0].lon : max_x;
            max_y = this->dataline[i].lat - this->pose[0].lat > max_y ? this->dataline[i].lat - this->pose[0].lat : max_y;

            min_x = this->dataline[i].lon - this->pose[0].lon < min_x ? this->dataline[i].lon - this->pose[0].lon : min_x;
            min_y = this->dataline[i].lat - this->pose[0].lat < min_y ? this->dataline[i].lat - this->pose[0].lat : min_y;
        };
        
        Point2d scale = Point2d(max_x - min_x, max_y - min_y);
        double im_scale = scale.x > scale.y ? (img_size.x - border) / scale.x : (img_size.y - border) / scale.y;

        for (int i = 1; i < this->pose.size(); i++) 
        {
            
            Point2i beg = Point2i(20 + im_scale * (this->pose[i - 1].lon - this->pose[0].lon  + abs(min_x)), border + im_scale * (this->pose[i - 1].lat - this->pose[0].lat + abs(min_y)));
            Point2i end = Point2i(20 + im_scale * (this->pose[i].lon - this->pose[0].lon + abs(min_x)), border + im_scale * (this->pose[i].lat - this->pose[0].lat + abs(min_y)));
            line(img, beg, end, Scalar(0, 0, 255),2);
            if (i == 1) circle(img, beg, 6, Scalar(0, 0, 255));
        };

        for (int i = 1; i < this->dataline.size(); i++)
        {
            Point2i beg = Point2i(20 + im_scale * (this->dataline[i - 1].lon - this->pose[0].lon + abs(min_x)), border + im_scale * (this->dataline[i - 1].lat - this->pose[0].lat + abs(min_y)));
            Point2i end = Point2i(20 + im_scale * (this->dataline[i].lon - this->pose[0].lon + abs(min_x)), border + im_scale * (this->dataline[i].lat - this->pose[0].lat + abs(min_y)));
            line(img, beg, end, Scalar(0,0,0),2);
            if (i == 1) circle(img, beg, 6, Scalar(0, 0, 0));
        };
        //imshow("Traect" + to_string(num),img);
        imwrite("Traect"+to_string(num)+".jpg", img);
    };
};

Point3d calcDisplasment_ang(Point3d gt, Point3d pose, int mode = 0) {
    if ( mode==1 ) return Point3d(gt.x - pose.x, gt.y - pose.y, gt.z - pose.z);

    cout << "AnG_disp" << ":\t" << resetiosflags(ios_base::floatfield) << gt.x - pose.x << "del\t" << gt.y - pose.y << "\t" << gt.z - pose.z << endl;
    cout << "AnG_disp" << ":\t" << gt.x << "\t" << gt.y << "\t" << gt.z << endl;
    cout << "AnG_disp" << ":\t" << pose.x << "\t" << pose.y << "\t" << pose.z << endl;
    return Point3d(gt.x - pose.x, gt.y - pose.y, gt.z - pose.z);
};

Pose_type calcDisplasment(Pose_type gt, Pose_type pose, Pose_type zero, string name = "", int format = 0) {
    Pose_type res;
    Pose_type delta;
    ofstream out;
    out.open(name+".txt", ios::app);

    res.lat = pose.lat - gt.lat;
    res.lon = pose.lon - gt.lon;
    res.alt = pose.alt - gt.alt;

    res.roll = pose.roll - gt.roll;
    res.pitch = pose.pitch - gt.pitch;
    res.yaw = pose.yaw - gt.yaw;
    
    delta.lat = zero.lat - gt.lat;
    delta.lon = zero.lon - gt.lon;
    delta.alt = zero.alt - gt.alt;

    delta.roll = zero.roll - gt.roll;
    delta.pitch = zero.pitch - gt.pitch;
    delta.yaw = zero.yaw - gt.yaw;

    double per_r = 100.0 * sqrt(res.lat * res.lat + res.lon * res.lon + res.alt * res.alt);
    per_r /= sqrt(delta.lat * delta.lat + delta.lon * delta.lon + delta.alt * delta.alt);

    double per_a = 100.0 * sqrt(res.roll * res.roll + res.pitch * res.pitch + res.yaw * res.yaw);

    switch (format) {
    case 0:
        cout << name << ":\t" << resetiosflags(ios_base::floatfield)  << sqrt(delta.lat * delta.lat + delta.lon * delta.lon + delta.alt * delta.alt) <<"m\t" << sqrt(res.lat * res.lat + res.lon * res.lon + res.alt * res.alt) << "m\t" << per_r << "%";
        cout << endl;
        out << sqrt(delta.lat * delta.lat + delta.lon * delta.lon + delta.alt * delta.alt) <<"\t" << sqrt(res.lat * res.lat + res.lon * res.lon + res.alt * res.alt) << "\t" << per_r << endl;
        break;
    case 1:
        cout << name << ":\t" << res.lat << "\t" << res.lon << "\t" << res.alt << "\t";
        cout << res.pitch << "\t" << res.roll << "\t" << res.yaw;
        break;
    case 2:
        cout << name << ":\t" << resetiosflags(ios_base::floatfield) << sqrt(delta.lat * delta.lat + delta.lon * delta.lon + delta.alt * delta.alt) << "m\t" << sqrt(res.lat * res.lat + res.lon * res.lon + res.alt * res.alt) << "m\t" << per_r << "%";
        break;
    };
    out.close();
    return res;
};

//////////////////////////////////////////////////  MAIN
int main(int argc, char** argv){

    if (TEST_ANGLE) {

        double w_std = 12;
        double sko = 1.5;
        double delta = 0.004;

        cout << endl;
        cout << endl;
        cout << "-------------<<<" << "Testing angle models" << ">>>-------------" << endl;
        cout << ">>>>w_std:\t"<< w_std <<endl;
        cout << ">>>>sko:\t"<< sko <<endl;
        cout << ">>>>delta:\t"<< delta << " sec"<<endl;
        cout << endl;
       
        Data_seq test_0("Test0 stand still");
        vector<Point3d> test_0_ang_err_vec;
        test_0.load_angle_model(generate_model(0.0, 300, sko, Point3d(0, 0, 0), Point3d(0, 0, 0), delta));
        for (int i = 0; i < test_0.limit; i++)
            test_0_ang_err_vec.push_back(calcDisplasment_ang(test_0.rot_ang_GT[i], test_0.rot_ang[i], 1));
        Point3d test_0_av_ang_err = Point3d(0, 0, 0);
        Point3d test_0_max_ang_err = Point3d(0, 0, 0);
        for (int i = 0; i < test_0_ang_err_vec.size(); i++)
        {
            test_0_max_ang_err.x = abs(test_0_ang_err_vec[i].x) > test_0_max_ang_err.x ? abs(test_0_ang_err_vec[i].x) : test_0_max_ang_err.x;
            test_0_max_ang_err.y = abs(test_0_ang_err_vec[i].y) > test_0_max_ang_err.y ? abs(test_0_ang_err_vec[i].y) : test_0_max_ang_err.y;
            test_0_max_ang_err.z = abs(test_0_ang_err_vec[i].z) > test_0_max_ang_err.z ? abs(test_0_ang_err_vec[i].z) : test_0_max_ang_err.z;

            test_0_av_ang_err.x += abs(test_0_ang_err_vec[i].x) / test_0_ang_err_vec.size();
            test_0_av_ang_err.y += abs(test_0_ang_err_vec[i].y) / test_0_ang_err_vec.size();
            test_0_av_ang_err.z += abs(test_0_ang_err_vec[i].z) / test_0_ang_err_vec.size();
        };
        cout << "Test0 stand still" << "\ttime: " << test_0.timestamps[test_0.limit - 1] - test_0.timestamps[0] << "sec" << endl;
        cout << ">>>>" << "Average angle error: roll " << test_0_av_ang_err.x << " deg\tpitch " << test_0_av_ang_err.y << " deg\tyaw " << test_0_av_ang_err.z << " deg" << endl;
        cout << ">>>>" << "Extrime angle error: roll " << test_0_max_ang_err.x << " deg\tpitch " << test_0_max_ang_err.y << " deg\tyaw " << test_0_max_ang_err.z << " deg" << endl;
        cout << endl;

        Data_seq test_1("Test1 wz");
        vector<Point3d> test_1_ang_err_vec;
        test_1.load_angle_model(generate_model(0.0, 300, sko, Point3d(w_std, 0, 0), Point3d(0, 0, 0), delta));
        for (int i = 0; i < test_1.limit; i++)
            test_1_ang_err_vec.push_back(calcDisplasment_ang(test_1.rot_ang_GT[i], test_1.rot_ang[i], 1));
        Point3d test_1_av_ang_err = Point3d(0, 0, 0);
        Point3d test_1_max_ang_err = Point3d(0, 0, 0);
        for (int i = 0; i < test_1_ang_err_vec.size(); i++)
        {
            test_1_max_ang_err.x = abs(test_1_ang_err_vec[i].x) > test_1_max_ang_err.x ? abs(test_1_ang_err_vec[i].x) : test_1_max_ang_err.x;
            test_1_max_ang_err.y = abs(test_1_ang_err_vec[i].y) > test_1_max_ang_err.y ? abs(test_1_ang_err_vec[i].y) : test_1_max_ang_err.y;
            test_1_max_ang_err.z = abs(test_1_ang_err_vec[i].z) > test_1_max_ang_err.z ? abs(test_1_ang_err_vec[i].z) : test_1_max_ang_err.z;

            test_1_av_ang_err.x += abs(test_1_ang_err_vec[i].x) / test_1_ang_err_vec.size();
            test_1_av_ang_err.y += abs(test_1_ang_err_vec[i].y) / test_1_ang_err_vec.size();
            test_1_av_ang_err.z += abs(test_1_ang_err_vec[i].z) / test_1_ang_err_vec.size();
        };
        cout << "Test1 wz" << "\ttime: " << test_1.timestamps[test_1.limit - 1] - test_1.timestamps[0] << "sec" << endl;
        cout << ">>>>" << "Average angle error: roll " << test_1_av_ang_err.x << " deg\tpitch " << test_1_av_ang_err.y << " deg\tyaw " << test_1_av_ang_err.z << " deg" << endl;
        cout << ">>>>" << "Extrime angle error: roll " << test_1_max_ang_err.x << " deg\tpitch " << test_1_max_ang_err.y << " deg\tyaw " << test_1_max_ang_err.z << " deg" << endl;
        cout << endl;

        Data_seq test_2("Test2 wx");
        vector<Point3d> test_2_ang_err_vec;
        test_2.load_angle_model(generate_model(0.0, 300, sko, Point3d(0, w_std, 0), Point3d(0, 0, 0), delta));
        for (int i = 0; i < test_2.limit; i++)
            test_2_ang_err_vec.push_back(calcDisplasment_ang(test_2.rot_ang_GT[i], test_2.rot_ang[i], 1));
        Point3d test_2_av_ang_err = Point3d(0, 0, 0);
        Point3d test_2_max_ang_err = Point3d(0, 0, 0);
        for (int i = 0; i < test_2_ang_err_vec.size(); i++)
        {
            test_2_max_ang_err.x = abs(test_2_ang_err_vec[i].x) > test_2_max_ang_err.x ? abs(test_2_ang_err_vec[i].x) : test_2_max_ang_err.x;
            test_2_max_ang_err.y = abs(test_2_ang_err_vec[i].y) > test_2_max_ang_err.y ? abs(test_2_ang_err_vec[i].y) : test_2_max_ang_err.y;
            test_2_max_ang_err.z = abs(test_2_ang_err_vec[i].z) > test_2_max_ang_err.z ? abs(test_2_ang_err_vec[i].z) : test_2_max_ang_err.z;

            test_2_av_ang_err.x += abs(test_2_ang_err_vec[i].x) / test_2_ang_err_vec.size();
            test_2_av_ang_err.y += abs(test_2_ang_err_vec[i].y) / test_2_ang_err_vec.size();
            test_2_av_ang_err.z += abs(test_2_ang_err_vec[i].z) / test_2_ang_err_vec.size();
        };
        cout << "Test2 wx" << "\ttime: " << test_2.timestamps[test_1.limit - 1] - test_2.timestamps[0] << "sec" << endl;
        cout << ">>>>" << "Average angle error: roll " << test_2_av_ang_err.x << " deg\tpitch " << test_2_av_ang_err.y << " deg\tyaw " << test_2_av_ang_err.z << " deg" << endl;
        cout << ">>>>" << "Extrime angle error: roll " << test_2_max_ang_err.x << " deg\tpitch " << test_2_max_ang_err.y << " deg\tyaw " << test_2_max_ang_err.z << " deg" << endl;
        cout << endl;

        Data_seq test_3("Test3 wy");
        vector<Point3d> test_3_ang_err_vec;
        test_3.load_angle_model(generate_model(0.0, 300, sko, Point3d(0, 0, w_std), Point3d(0, 0, 0), delta));
        for (int i = 0; i < test_1.limit; i++)
            test_3_ang_err_vec.push_back(calcDisplasment_ang(test_3.rot_ang_GT[i], test_3.rot_ang[i], 1));
        Point3d test_3_av_ang_err = Point3d(0, 0, 0);
        Point3d test_3_max_ang_err = Point3d(0, 0, 0);
        for (int i = 0; i < test_1_ang_err_vec.size(); i++)
        {
            test_3_max_ang_err.x = abs(test_3_ang_err_vec[i].x) > test_3_max_ang_err.x ? abs(test_3_ang_err_vec[i].x) : test_3_max_ang_err.x;
            test_3_max_ang_err.y = abs(test_3_ang_err_vec[i].y) > test_3_max_ang_err.y ? abs(test_3_ang_err_vec[i].y) : test_3_max_ang_err.y;
            test_3_max_ang_err.z = abs(test_3_ang_err_vec[i].z) > test_3_max_ang_err.z ? abs(test_3_ang_err_vec[i].z) : test_3_max_ang_err.z;

            test_3_av_ang_err.x += abs(test_3_ang_err_vec[i].x) / test_3_ang_err_vec.size();
            test_3_av_ang_err.y += abs(test_3_ang_err_vec[i].y) / test_3_ang_err_vec.size();
            test_3_av_ang_err.z += abs(test_3_ang_err_vec[i].z) / test_3_ang_err_vec.size();
        };
        cout << "Test3 wy" << "\ttime: " << test_3.timestamps[test_1.limit - 1] - test_3.timestamps[0] << "sec" << endl;
        cout << ">>>>" << "Average angle error: roll " << test_3_av_ang_err.x << " deg\tpitch " << test_3_av_ang_err.y << " deg\tyaw " << test_3_av_ang_err.z << " deg" << endl;
        cout << ">>>>" << "Extrime angle error: roll " << test_3_max_ang_err.x << " deg\tpitch " << test_3_max_ang_err.y << " deg\tyaw " << test_3_max_ang_err.z << " deg" << endl;
        cout << endl;
    };

    vector<string> sources;
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0001_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0002_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0005_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0009_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0011_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0013_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0014_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0017_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0018_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0048_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0051_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0056_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0057_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0059_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0060_sync/");
    sources.push_back("C:/Kitti/2011_09_26/2011_09_26_drive_0096_sync/");

    for(int num_sources = 0; num_sources < sources.size(); num_sources++)
    {
        cout << endl;
        cout << endl;
        cout << "-------------<<<" << sources[num_sources] << ">>>-------------" << endl;
        cout << endl;
        int i_main = 0;

        Data_seq ds(sources[num_sources]+"oxts/");
        ds.loadBINS("EC");
        vector<Point3d> ang_err_vec;
        vector<Pose_type> pose_err_vec;
        while (i_main < ds.limit - 1) {
            i_main++;
            Pose_type GT = getGTData(sources[num_sources] + "oxts/data/", i_main);

            //cout << "GT" << scientific << setprecision(6) << ":\t" << GT.lat - ds.pose[0].lat << "\t" << GT.lon - ds.pose[0].lon << "\t" << GT.alt - ds.pose[0].alt << "\t";
            //cout << GT.pitch - ds.pose[0].pitch << "\t" << GT.roll - ds.pose[0].roll << "\t" << GT.yaw - ds.pose[0].yaw << endl;
            //cout << "BINS" << ":\t" << ds.pose[i_main].lat - ds.pose[0].lat << "\t" << ds.pose[i_main].lon - ds.pose[0].lon << "\t" << ds.pose[i_main].alt - ds.pose[0].alt << "\t";
            //cout << ds.pose[i_main].pitch - ds.pose[0].pitch << "\t" << ds.pose[i_main].roll - ds.pose[0].roll << "\t" << ds.pose[i_main].yaw - ds.pose[0].yaw << endl;
            //
            ang_err_vec.push_back(calcDisplasment_ang(ds.rot_ang_GT[i_main], ds.rot_ang[i_main], 1));
            //pose_err_vec.push_back(calcDisplasment(GT, ds.pose[i_main], ds.pose[0], "Disp" + to_string(num_sources)));

           

        };
        cout << endl;
        Point3d av_ang_err;
        Point3d max_ang_err = Point3d(0, 0, 0);
        for (int i = 0; i < ang_err_vec.size(); i++)
        {
            max_ang_err.x = abs(ang_err_vec[i].x) > max_ang_err.x ? abs(ang_err_vec[i].x) : max_ang_err.x;
            max_ang_err.y = abs(ang_err_vec[i].y) > max_ang_err.y ? abs(ang_err_vec[i].y) : max_ang_err.y;
            max_ang_err.z = abs(ang_err_vec[i].z) > max_ang_err.z ? abs(ang_err_vec[i].z) : max_ang_err.z;

            av_ang_err.x += abs(ang_err_vec[i].x) / ang_err_vec.size();
            av_ang_err.y += abs(ang_err_vec[i].y) / ang_err_vec.size();
            av_ang_err.z += abs(ang_err_vec[i].z) / ang_err_vec.size();
        };
        Pose_type av_pose_err;
        av_pose_err.lat = 0.0;
        av_pose_err.lon = 0.0;
        av_pose_err.alt = 0.0;
        for (int i = 0; i < pose_err_vec.size(); i++)
        {
            av_pose_err.lat += abs(pose_err_vec[i].lat) / pose_err_vec.size();
            av_pose_err.lon += abs(pose_err_vec[i].lon) / pose_err_vec.size();
            av_pose_err.alt += abs(pose_err_vec[i].alt) / pose_err_vec.size();
        }
        ds.print_traect(num_sources);
        cout << sources[num_sources] <<"\ttime: "<< ds.timestamps[ds.limit-1] - ds.timestamps[0] << "sec" << endl;
        cout << ">>>>"  << "Average angle error: roll "<< av_ang_err.x << " deg\tpitch " << av_ang_err.y << " deg\tyaw " << av_ang_err.z << " deg" << endl;
        cout << ">>>>"  << "Extrime angle error: roll "<< max_ang_err.x << " deg\tpitch " << max_ang_err.y << " deg\tyaw " << max_ang_err.z << " deg" << endl;
        cout << ">>>>"  << "Average pose  error: lat  "<< av_pose_err.lat << " \tlon " << av_pose_err.lon << " \t alt " << av_pose_err.alt << endl;
        cout << endl;
    }
}
//////////////////////////////////////////////////  MAIN

Pose_type getGTData(string source_dir, int num) {
    Pose_type res;
    static Pose_type zero;
    string filename, num_part;
    num_part.append(10 - to_string(num).length(), '0') += to_string(num); //000 000 0000.png 000 000 0000
    filename = source_dir + num_part + ".txt";

    string pose_line;
    ifstream in_pos(filename);
    if (!in_pos) cout << "File in_pos not open \"" + filename + "\"" + "\n";
    getline(in_pos, pose_line);
   
    double pose_data[32];
    for (int i = 0; i < 25; i++) {
        pose_data[i] = stod(pose_line.substr(0, pose_line.find(' ')));
        pose_line = pose_line.substr(pose_line.find(' ')+1, pose_line.length());
    };

    res.lat = 111134.861111 * pose_data[0];
    //res.lon = cos(M_PI * pose_data[0] / 180.0) * 111134.861111 * pose_data[1];
    res.lon = cos(M_PI * pose_data[0] / 180.0) * 40075000 / 360;
    //res.lat = (111132.954 - 559.822 * cos(2 * pose_data[0]) + 1.175 * cos(4 * pose_data[0]))* pose_data[0];
    //res.lon = 111132.954 * cos(pose_data[0]);

    res.alt = pose_data[2];

    res.roll = pose_data[3];
    res.pitch = pose_data[4];
    res.yaw = pose_data[5];

    res.vn = pose_data[6];
    res.ve = pose_data[7];
    res.vf = pose_data[8];
    res.vl = pose_data[9];
    res.vu = pose_data[10];
    res.ax = pose_data[11];
    res.ay = pose_data[12];
    res.az = pose_data[13];
    res.af = pose_data[14];
    res.al = pose_data[15];
    res.au = pose_data[16];
    res.wx = pose_data[17];
    res.wy = pose_data[18];
    res.wz = pose_data[19];
    res.wf = pose_data[20];
    res.wl = pose_data[21];
    res.wu = pose_data[22];
    in_pos.close();
    return res;
};
